<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8"/>
<title><%= room %> - View</title>
<script type="text/javascript" src="//code.jquery.com/jquery-2.2.4.min.js"></script>
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" rel="stylesheet"/>
<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script src="/qrcode.min.js"></script>

<link href="/colorbox.css" rel="stylesheet"/>
<script src="/jquery.colorbox-min.js"></script>

<meta name="viewport" content="width=device-width,initial-scale=1"/>

<link rel="shortcut icon" href="/icon.png" type="image/png"/>
<link rel="icon" href="/icon.png" type="image/png"/>
<link rel="apple-touch-icon" href="/icon.png"/>

<meta name="viewport" content="width=device-width,initial-scale=1"/>
<meta name="apple-mobile-web-app-capable" content="yes"/>
<meta name="apple-mobile-web-app-status-bar-style" content="black"/>
<meta name="apple-mobile-web-app-title" content="Doodle Share"/>

<!-- // OGP tags -->
<meta property="og:title" content="Doodle Share"/>
<meta property="og:type" content="website"/>
<meta property="og:url" content="https://doodle-share.au-syd.mybluemix.net/"/>
<meta property="og:image" content="https://doodle-share.au-syd.mybluemix.net/icon.png"/>
<meta property="og:site_name" content="Doodle Share"/>
<meta property="og:description" content="Doodle Share : リアルタイムお絵描き共有サービス"/>
<!-- OGP tags // -->

<!-- // Twitter Card -->
<meta property="twitter:card" content="summary"/>
<meta property="twitter:site" content="@dotnsf"/>
<meta property="twitter:creator" content="@dotnsf"/>
<meta property="twitter:url" content="https://doodle-share.au-syd.mybluemix.net/"/>
<meta property="twitter:image" content="https://doodle-share.au-syd.mybluemix.net/icon.png"/>
<meta property="twitter:title" content="Doodle Share"/>
<meta property="twitter:description" content="Doodle Share : リアルタイムお絵描き共有サービス"/>
<!-- Twitter Card // -->

<style type="text/css">
html, body{
  text-align: center;
  background-color: #fafafa;
  font-size: 20px;
  color: #333;
}
.mycanvas{
  border: 1px solid #333;
}
.card-columns{
  column-count: 1;
}
.card-group .card{
  max-width: calc(100%);
}
}
</style>
</head>
<body>

<canvas id="qrcode" style="display: none;"></canvas>

<div id="card-groups">
  <!--
  <div class="card-group" id="cards-1">
  </div>
  -->
</div>

<div style="display:none;">
  <div id="box_content">
  </div>
</div>

<script>
var socketio = null;
var socket_ids = [];

var base_url = location.origin + '/';

var cards = [];    //. カード
var imgs = {};     //. 画像データ
//var row = 1;
//var cnt = 0;

$(function(){
  socketio = io.connect();

  init();

  QRCode.toCanvas( document.getElementById( 'qrcode' ), base_url + '?room=<%= room %>', function( err ){
    if( err ){ console.log( err ); }
  });

  //. Only for debug
  /*
  $('#qrcode').on( 'click', function( e ){
    $('#card-groups').html( '' );
    $.colorbox.remove();

    //. カード追加
    var color = 'secondary'; 
    var card = '<div id="card_' + cards.length + '" class="card border-' + color + '" style="cursor: pointer;">'
      + '<div class="card-body text-' + color + '">'
      + '<h4 class="card-title"><a href="#" class="btn btn-xs btn-' + color + '" onClick="removeCard(\'card_' + cards.length + '\');">&times;</a>#' + cards.length + '</h4>'
      + '</div>'
      + '<a href="#box_content" id="box_content_' + cards.length + '" title="#' + cards.length + '">'
      //+ '#' + cards.length
      + '<img class="card-img-bottom" id="image_' + cards.length + '" alt="(image of ' + cards.length + ')" ts="0" src="./' + Math.floor( Math.random() * 3 ) + '.png"/>'
      + '</a>'
      + '</div>';
    //$('#box_content_'+cards.length).colorbox({ inline: true, transition: 'none', width: "90%", height: "90%", onOpen: function(){ zoomImage( cards.length ); }, onClosed: function(){ $('#box_content').html(''); } });
    cards.push( card );

    //. カードグループを必要数だけ追加
    appendCardGroups( '#card-groups', cards.length );
  });
  */

  socketio.on( 'init_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( socket_ids.indexOf( socket_id ) > -1 ){
    }else{
      socket_ids.push( socket_id );
      //$('#debug_ul').append( '<li id="socket_' + socket_id + '">' + socket_id + '</li>' );
      console.log( socket_ids );

      var color = 'secondary'; //generateColor( msg.name );

      $('#card-groups').html( '' );
      $.colorbox.remove();

      //. カード追加
      var card = '<div id="card_' + socket_id + '" class="card border-' + color + '" style="cursor: pointer;">'
        + '<div id="div_' + socket_id + '" class="card-body text-' + color + '">'
        + '<h4 class="card-title"><a id="a_' + socket_id + '" href="#" class="btn btn-xs btn-' + color + '" onClick="removeCard(\'card_' + socket_id + '\');">' + msg.name + '</a><span id="span_' + socket_id + '"></span></h4>'
        + '</div>'
        + '<a href="#box_content" id="box_content_' + socket_id + '" title="' + msg.name + '">'
        //+ '<img class="card-img-bottom" id="image_' + socket_id + '" alt="(image of ' + msg.name + ')" ts="' + msg.timestamp + '" width="315" height="330"/>'
        + '<img class="card-img-bottom" id="image_' + socket_id + '" alt="(image of ' + msg.name + ')" ts="' + msg.timestamp + '"/>'
        + '</a>'
        + '</div>';
      cards.push( card );

      //$('#box_content_'+socket_id).colorbox({ inline: true, transition: 'none', width: "90%", height: "90%", onOpen: function(){ zoomImage( socket_id ); }, onClosed: function(){ $('#box_content').html(''); } });

      //. カードグループを必要数だけ追加
      appendCardGroups( '#card-groups', cards.length );
    }
  });

  socketio.on( 'image_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( socket_ids.indexOf( socket_id ) > -1 ){
      var ts = $('#image_'+socket_id).attr( 'ts' );
      ts = parseInt( ts );

      if( msg.timestamp > ts ){
        $('#image_'+socket_id).prop( 'src', msg.image_src );
        $('#image_'+socket_id).prop( 'title', msg.comment );
        $('#image_'+socket_id).prop( 'ts', msg.timestamp );

        //. 再描画用に記録
        var img = {
          src: msg.image_src,
          title: msg.comment,
          ts: msg.timestamp
        };
        imgs[socket_id] = img;

        var zoom_socket_id = $('#zoom_image').attr( 'socket_id' );
        if( zoom_socket_id && zoom_socket_id == socket_id ){
          $('#zoom_image').prop( 'src', msg.image_src );
        }
      }
    }
  });

  socketio.on( 'start_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( socket_ids.indexOf( socket_id ) > -1 ){
      $('#card_'+socket_id).removeClass( 'border-primary' );
      $('#div_'+socket_id).removeClass( 'text-primary' );
      $('#a_'+socket_id).removeClass( 'btn-primary' );
      $('#card_'+socket_id).addClass( 'border-secondary' );
      $('#div_'+socket_id).addClass( 'text-secondary' );
      $('#a_'+socket_id).addClass( 'btn-secondary' );
      $('#span_'+socket_id).html( '' );
    }
  });

  socketio.on( 'goal_client_view', function( msg ){
    var socket_id = msg.uuid; //msg.socket_id;
    if( socket_ids.indexOf( socket_id ) > -1 ){
      $('#card_'+socket_id).removeClass( 'border-secondary' );
      $('#div_'+socket_id).removeClass( 'text-secondary' );
      $('#a_'+socket_id).removeClass( 'btn-secondary' );
      $('#card_'+socket_id).addClass( 'border-primary' );
      $('#div_'+socket_id).addClass( 'text-primary' );
      $('#a_'+socket_id).addClass( 'btn-primary' );
      $('#span_'+socket_id).html( msg.moves + ' moves, ' + msg.seconds + ' sec' );

      //. HATOYA へ記録
      $.ajax({
        method: 'POST',
        url: '/api/<%= dbname %>',
        data: msg,
        success: function( result ){
        },
        error: function( e0, e1, e2 ){
        }
      });
    }
  });
});

function init(){
  //. リサイズ時
  //$(window).on( 'load resize', function(){
    resized();
  //});
}

function resized(){
  var browserWidth = window.innerWidth;
  var browserHeight = window.innerHeight;

  socketio.emit( 'init_view', { room: '<%= room %>', width: browserWidth, height: browserHeight } );
}


function generateColor( name ){
  var arr = [ 'primary', 'secondary', 'success', 'danger', 'warning', 'info', /*'light',*/ 'dark' ];
  var r = 0;
  for( var i = 0; i < name.length; i ++ ){
    var c = name.charCodeAt( i );
    r += c;
  }
  r = r % arr.length;

  return arr[r];
}

function removeCard( card_id ){
  $('#'+card_id).css( 'display', 'none' );

  //. card_id = 'card_XXXXXX';
  var socket_id = card_id.substr( 6 );
  if( imgs[socket_id] ){
    delete imgs[socket_id];
  }

  var b = true;
  for( var i = 0; i < cards.length && b; i ++ ){
    var card = cards[i];
    if( card.indexOf( 'card_' + socket_id ) > -1 && card.indexOf( 'image_' + socket_id ) > -1 ){
      cards.splice( i, 1 );
      b = false;
    }
  }
}

function zoomImage( socket_id ){
  if( socket_id ){
    //console.log( 'zoomImage: socket_id = ' + socket_id );
    $('#box_content').html( '<img id="zoom_image" socket_id="' + socket_id + '" src="' + $('#image_'+socket_id).prop( 'src' ) + '"/>' );
  }
}


//. num 個の要素をなるべく正方形に近い表形式の card-group 化する
function appendCardGroups( cardgroups_selector, num ){
  //. 近づける正方形の一辺の長さ
  var m = Math.ceil( Math.sqrt( num ) );
  //. m 個の card-group が必要
  for( var i = 0; i < m; i ++ ){
    $(cardgroups_selector).append( '<div class="card-group" id="cards-' + i + '">' );
  }
  //. ( m * m ) の正方形の中に表示する
  for( var i = 0; i < num; i ++ ){
    var card = cards[i];
    var row = Math.floor( i / m );
    $('#cards-'+row).append( card );
  }

  //. クラスでまとめて ColorBox の指定
  $('.card').colorbox({ href: '#box_content', inline: true, transition: 'none', width: "90%", innerHeight: "90%", onOpen: function(){ var socket_id = $(this).prop( 'id' ).substr( 5 ); zoomImage( socket_id ); }, onClosed: function(){ $('#box_content').html(''); } });

  if( num % m ){
    var row = Math.floor( num / m );
    for( var i = num; i % m > 0; i ++ ){
      var dummycard = '<div class="card"></div>';
      $('#cards-'+row).append( dummycard );
    }
  }

  //. 画像再描画
  Object.keys( imgs ).forEach( function( socket_id ){
    var img = imgs[socket_id];
    //console.log( 'appendCardGroups: socket_id = ' + socket_id, img );

    $('#image_'+socket_id).prop( 'src', img.src );
    $('#image_'+socket_id).prop( 'title', img.title );
    $('#image_'+socket_id).prop( 'ts', img.ts );
  });
}
</script>
</body>
</html>
